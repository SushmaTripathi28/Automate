name: Java Maven Build, Publish, and Deploy

on:
  push:
    branches: ["app"]
  pull_request:
    branches: ["app"]

jobs:
  build_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set Up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: package
          path: target/*.jar

  docker_build_and_push:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Google Artifact Registry
        run: |
          gcloud auth configure-docker northamerica-northeast1-docker.pkg.dev

      - name: Create Artifact Repository
        run: |
          gcloud artifacts repositories create my-repo1 --repository-format=docker --location=northamerica-northeast1 --project=peak-axiom-426310-b1 || echo "Repository already exists"

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: package
          path: ./target

      - name: Build and push Docker image
        run: |
          docker build -t northamerica-northeast1-docker.pkg.dev/peak-axiom-426310-b1/my-repo1/my-image:latest .
          docker push northamerica-northeast1-docker.pkg.dev/peak-axiom-426310-b1/my-repo1/my-image:latest

  create_and_deploy_gke:
    needs: docker_build_and_push
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK and install required packages
        run: |
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          sudo apt-get install -y apt-transport-https ca-certificates
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

      - name: Create GKE cluster
        run: |
          gcloud container clusters create cluster-2 --zone southamerica-east1-a	 --project peak-axiom-426310-b1 --machine-type=e2-medium --num-nodes=2 --disk-size=100 || echo "Cluster already exists"

      - name: Set up GKE credentials
        run: |
          gcloud container clusters get-credentials cluster-2 --zone southamerica-east1-a	 --project peak-axiom-426310-b1

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Delete existing deployment if exists
        run: |
          kubectl delete deployment my-deployment || true
          sleep 30 # Ensure the deployment is deleted before reapplying

      - name: Apply Kubernetes Deployment
        run: |
          kubectl apply -f deployment.yaml

      - name: Wait for deployment to stabilize
        run: |
          for i in {1..10}; do
            kubectl rollout status deployment/my-deployment --timeout=300s && break
            sleep 30
          done

      - name: Get details of crashing pods
        run: |
          kubectl get pods -o wide
          kubectl describe pod -l app=my-app

      - name: Retry getting logs if pod is not ready
        id: retry-logs
        run: |
          for i in {1..10}; do
            kubectl logs -l app=my-app --all-containers=true --max-log-requests=10 && break
            sleep 30
          done

      - name: Check logs output
        run: echo "Logs retrieved successfully"
        if: steps.retry-logs.outcome == 'success'
